""""
This code simulates Geometric Brownian Motion (GBM) and compares the analytical solution 
with numerical method. checks the martingale property over time, and visualizes results.

""""



import numpy as np
import matplotlib.pyplot as plt


# Parameters
T = 20.0  # Time horizon
r = 0.05  # Risk-free rate
sigma = 0.12  # Volatility
S0 = 100  # Initial price
paths = 10000  # Number of paths
steps = 1000  # Number of time steps

# Validate inputs
validate_inputs(T, r, sigma, S0, paths, steps)

dt = T / steps  # Time step size

# Set random seed for reproducibility
np.random.seed(42)

# Generate Brownian increments
dw = np.random.normal(0, np.sqrt(dt), (paths, steps))
W = np.zeros((paths, steps + 1))
W[:, 1:] = np.cumsum(dw, axis=1)  # Wiener process paths

# Simulate GBM paths using Euler-Maruyama (vectorized)
S = np.zeros((paths, steps + 1))
S[:, 0] = S0
for i in range(steps):
    S[:, i + 1] = S[:, i] * (1 + r * dt + sigma * dw[:, i])

# Analytical solution at T
S_T_analytical = S0 * np.exp((r - 0.5 * sigma**2) * T + sigma * W[:, -1])

# Compute discounted prices
times = np.linspace(0, T, steps + 1)
discount_factors = np.exp(-r * times)
discounted_S = S * discount_factors[np.newaxis, :]

# Statistics
mean_numerical = np.mean(S[:, -1])
mean_analytical = S0 * np.exp(r * T)  # Exact mean
var_numerical = np.var(S[:, -1])
var_analytical = S0**2 * np.exp(2 * r * T) * (np.exp(sigma**2 * T) - 1)
mean_discounted = np.mean(discounted_S, axis=0)

# Confidence intervals for numerical mean
std_err = np.std(S[:, -1]) / np.sqrt(paths)
ci_lower, ci_upper = mean_numerical - 1.96 * std_err, mean_numerical + 1.96 * std_err

# Print results
print(f"Analytical Mean at T: {mean_analytical:.2f}")
print(f"Numerical Mean at T: {mean_numerical:.2f} (95% CI: [{ci_lower:.2f}, {ci_upper:.2f}])")
print(f"Analytical Variance at T: {var_analytical:.2f}")
print(f"Numerical Variance at T: {var_numerical:.2f}")
print(f"Mean Discounted Price at t=0: {mean_discounted[0]:.2f} (Expected: {S0:.2f})")
print(f"Mean Discounted Price at t=T/2: {mean_discounted[steps//2]:.2f} (Expected: {S0:.2f})")
print(f"Mean Discounted Price at t=T: {mean_discounted[-1]:.2f} (Expected: {S0:.2f})")


# Plot sample paths of asset price
plt.figure(figsize=(10, 6))
for i in range(200):
    plt.plot(times, S[i, :])
plt.xlabel('Time (years)')
plt.ylabel('Asset Price')
plt.title('Sample GBM Paths (Risk-Neutral Measure)')
plt.legend()
plt.grid(True)
plt.savefig('gbm_paths.png')
plt.show()


# Plot sample paths of discounted price
plt.figure(figsize=(10, 6))
for i in range(200):
    plt.plot(times, discounted_S[i, :])
plt.axhline(y=S0, color='r', linestyle='--', label=f'S_0 = {S0}')
plt.xlabel('Time (years)')
plt.ylabel('Discounted Price')
plt.title('Sample Paths of Discounted Asset Price')
plt.legend()
plt.grid(True)
plt.savefig('discounted_paths.png')
plt.show()


#Plot histogram of final value 
plt.figure(figsize = (10,6))
plt.hist(S[:,-1], bins = 200)
plt.show

