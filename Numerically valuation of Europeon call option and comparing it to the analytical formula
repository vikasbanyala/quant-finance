"""
Prices a European call option using Monte Carlo simulation under the Black-Scholes model.
Simulates asset prices under the risk-neutral measure and computes the discounted expected payoff.
Compares with the analytical Black-Scholes formula and visualizes sample paths.

"""

import numpy as np
import matplotlib.pyplot as plt



#analytical price

def black_scholes_analytical_call(s0,K,r,sigma,T):
    d1 = (np.log(s0/K) + (r + 0.5 * sigma ** 2 * T)) / (sigma * np.sqrt(T))
    d2 = d1 - (sigma * np.sqrt(T))
    call_price_analytical = s0* norm.cdf(d1) - np.exp(-r*T) * K * norm.cdf(d2)
    
    return call_price_analytical

#numerical solution
def montecarlosimu(paths, steps, sigma, r, s0, K, T):

    
    dt = T/steps
    dw = np.random.normal(0,np.sqrt(dt), [paths, steps])
    w = np.cumsum(dw, axis = 1)

    s = np.zeros([paths, steps+1])
    s[:,0]=s0

    for i in range(steps):
        s[:,i+1] = s[:,i] * (1 + (r * dt) + sigma * dw[:,i])

    payoff = np.maximum(s[:,-1]-K, 0)
    call_price_numerical = np.exp(-r*T) * np.mean(payoff)
    
    return call_price_numerical, s

def mainfunction():
    #parameters
    s0 = 100
    K = 102
    T = 1
    r = 0.05
    sigma = 0.08
    paths = 25000
    steps = 1000
    
    call_price_analytical = black_scholes_analytical_call(s0,K,r,sigma,T)
    call_price_numerical, s_paths = montecarlosimu(paths, steps, sigma, r, s0, K, T)
    print(f'Analytical price of europen call option is {call_price_analytical}')
    print(f'Numerical price of europen call option is {call_price_numerical}')
    
    time = np.linspace(0,T,steps+1)
    
    plt.figure(figsize=(12,6))
    for i in range(100):
        plt.plot(time,s_paths[i,:])
    plt.axhline(y = K, color = 'red', linestyle='--', label=f'strike price {K}')
    plt.xlabel('time steps')
    plt.ylabel('stock paths')
    plt.title("sample stock paths")
    plt.show()
    
    
mainfunction()
    
   
